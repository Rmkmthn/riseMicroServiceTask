// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rise.ContactCore;

namespace Rise.ContactCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Rise.ContactCore.Models.Const", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstDesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConstID")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ConstOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ConstValue")
                        .HasColumnType("text");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Consts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a4f8571-c184-4602-935a-5bf7fd78aa2b"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 1, 33, 54, 411, DateTimeKind.Unspecified).AddTicks(335), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Cell Phone",
                            ConstID = "ContactInfoTypes",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("4ad9a6a0-11eb-4a18-8e71-80710063feea"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 1, 33, 54, 414, DateTimeKind.Unspecified).AddTicks(2310), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "E-Mail",
                            ConstID = "ContactInfoTypes",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("65246cd0-73db-45c7-8efb-36dde39293a1"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 1, 33, 54, 414, DateTimeKind.Unspecified).AddTicks(2337), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Location",
                            ConstID = "ContactInfoTypes",
                            ConstOrder = 2,
                            ConstValue = "2",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("62f07822-e806-4530-a23c-6fe7af9c928d"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 1, 33, 54, 414, DateTimeKind.Unspecified).AddTicks(2341), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Preparing",
                            ConstID = "ReportStatus",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("7c3822b8-85a1-405f-b9c1-0a8a24547b9f"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 1, 33, 54, 414, DateTimeKind.Unspecified).AddTicks(2344), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Completed",
                            ConstID = "ReportStatus",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        });
                });

            modelBuilder.Entity("Rise.ContactCore.Models.ConstLang", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstLangDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ConstRID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LangID")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConstRID");

                    b.ToTable("ConstLangs");
                });

            modelBuilder.Entity("Rise.ContactCore.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContactCompany")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactSurname")
                        .HasColumnType("text");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactCompany");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Rise.ContactCore.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContactRID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("InfoTypeRID")
                        .HasColumnType("uuid");

                    b.Property<string>("InfoValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactRID");

                    b.HasIndex("InfoTypeRID");

                    b.HasIndex("ContactRID", "InfoTypeRID")
                        .IsUnique();

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Rise.ContactCore.Models.ConstLang", b =>
                {
                    b.HasOne("Rise.ContactCore.Models.Const", "Const")
                        .WithMany("ConstLangs")
                        .HasForeignKey("ConstRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Const");
                });

            modelBuilder.Entity("Rise.ContactCore.Models.ContactInfo", b =>
                {
                    b.HasOne("Rise.ContactCore.Models.Contact", "Contact")
                        .WithMany("ContactInfos")
                        .HasForeignKey("ContactRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rise.ContactCore.Models.Const", "ConstInfoType")
                        .WithMany("ContactInfos")
                        .HasForeignKey("InfoTypeRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstInfoType");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Rise.ContactCore.Models.Const", b =>
                {
                    b.Navigation("ConstLangs");

                    b.Navigation("ContactInfos");
                });

            modelBuilder.Entity("Rise.ContactCore.Models.Contact", b =>
                {
                    b.Navigation("ContactInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
