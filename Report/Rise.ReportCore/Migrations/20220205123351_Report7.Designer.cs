// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rise.ReportCore;

namespace Rise.ReportCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220205123351_Report7")]
    partial class Report7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Rise.ReportCore.Models.Const", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstDesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConstID")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ConstOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ConstValue")
                        .HasColumnType("text");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Consts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05405072-76d6-4b7a-bf51-83cb8d000431"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 15, 33, 50, 636, DateTimeKind.Unspecified).AddTicks(8460), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Cell Phone",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("1f07bab5-71d0-4a99-b1f1-8e5d21fe1c65"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 15, 33, 50, 636, DateTimeKind.Unspecified).AddTicks(9524), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "E-Mail",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("7aed047e-1179-4a3f-92dd-5daba1947305"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 15, 33, 50, 636, DateTimeKind.Unspecified).AddTicks(9539), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Location",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 2,
                            ConstValue = "2",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("31805228-b72a-46ad-90de-5f27dd22482d"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 15, 33, 50, 636, DateTimeKind.Unspecified).AddTicks(9541), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Preparing",
                            ConstID = "ReportStatus",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("29d99423-31dd-4627-8d98-7fb95598349d"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 15, 33, 50, 636, DateTimeKind.Unspecified).AddTicks(9543), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Completed",
                            ConstID = "ReportStatus",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        });
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ConstLang", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstLangDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ConstRID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LangID")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConstRID");

                    b.ToTable("ConstLangs");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportID")
                        .HasColumnType("text");

                    b.Property<string>("ReportName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("519ea9ad-d698-4b6f-819c-535ba27e351f"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 15, 33, 50, 622, DateTimeKind.Unspecified).AddTicks(8107), new TimeSpan(0, 3, 0, 0, 0)),
                            Deleted = false,
                            ReportID = "00001",
                            ReportName = "Statistics of Contact by Location"
                        });
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ReportRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportFilePath")
                        .HasColumnType("text");

                    b.Property<Guid>("ReportRID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportStatusRID")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("RequestedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportRID");

                    b.HasIndex("ReportStatusRID");

                    b.ToTable("ReportRequests");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ConstLang", b =>
                {
                    b.HasOne("Rise.ReportCore.Models.Const", "Const")
                        .WithMany("ConstLangs")
                        .HasForeignKey("ConstRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Const");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ReportRequest", b =>
                {
                    b.HasOne("Rise.ReportCore.Models.Report", "Report")
                        .WithMany("ReportRequests")
                        .HasForeignKey("ReportRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rise.ReportCore.Models.Const", "ConstReportStatus")
                        .WithMany("ReportRequests")
                        .HasForeignKey("ReportStatusRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstReportStatus");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.Const", b =>
                {
                    b.Navigation("ConstLangs");

                    b.Navigation("ReportRequests");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.Report", b =>
                {
                    b.Navigation("ReportRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
