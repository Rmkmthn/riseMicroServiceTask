// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rise.ReportCore;

namespace Rise.ReportCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220205072959_Report2")]
    partial class Report2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Rise.ReportCore.Models.Const", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstDesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConstID")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ConstOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ConstValue")
                        .HasColumnType("text");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Consts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82cbc07a-4f0c-4ab5-ab5e-30dfa9e21a91"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 10, 29, 59, 658, DateTimeKind.Unspecified).AddTicks(1195), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Cell Phone",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("93495646-be1d-43c7-86fc-f3714e6e9e44"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 10, 29, 59, 661, DateTimeKind.Unspecified).AddTicks(963), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "E-Mail",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("71011eb1-7341-44e5-899b-14ceba3bfa06"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 10, 29, 59, 661, DateTimeKind.Unspecified).AddTicks(988), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Location",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 2,
                            ConstValue = "2",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("6b294bdc-bf6c-422d-8904-a1ee96bd9e2b"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 10, 29, 59, 661, DateTimeKind.Unspecified).AddTicks(992), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Preparing",
                            ConstID = "ReportStatus",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("2687f90f-d768-488f-a949-7f32d8b13dcb"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 10, 29, 59, 661, DateTimeKind.Unspecified).AddTicks(994), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Completed",
                            ConstID = "ReportStatus",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        });
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ConstLang", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstLangDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ConstRID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LangID")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConstRID");

                    b.ToTable("ConstLangs");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ReportRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReportStatusRID")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("RequestedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportStatusRID");

                    b.ToTable("ReportRequests");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ConstLang", b =>
                {
                    b.HasOne("Rise.ReportCore.Models.Const", "Const")
                        .WithMany("ConstLangs")
                        .HasForeignKey("ConstRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Const");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ReportRequest", b =>
                {
                    b.HasOne("Rise.ReportCore.Models.Const", "ConstReportStatus")
                        .WithMany("ReportRequests")
                        .HasForeignKey("ReportStatusRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstReportStatus");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.Const", b =>
                {
                    b.Navigation("ConstLangs");

                    b.Navigation("ReportRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
