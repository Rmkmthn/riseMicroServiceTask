// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rise.ReportCore;

namespace Rise.ReportCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220205080255_Report3")]
    partial class Report3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Rise.ReportCore.Models.Const", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstDesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConstID")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ConstOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ConstValue")
                        .HasColumnType("text");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Consts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6a72885-ac7b-4f42-a839-2b994aff5d8e"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 11, 2, 55, 534, DateTimeKind.Unspecified).AddTicks(4973), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Cell Phone",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("2dfc02ca-c19a-4a7d-93b0-611fdf7fb79e"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 11, 2, 55, 537, DateTimeKind.Unspecified).AddTicks(6454), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "E-Mail",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("2adeecf4-c899-48bd-b856-7dbf725f396c"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 11, 2, 55, 537, DateTimeKind.Unspecified).AddTicks(6480), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Location",
                            ConstID = "ReportInfoTypes",
                            ConstOrder = 2,
                            ConstValue = "2",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("9da71206-335d-440d-8ed9-3263ad8009b9"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 11, 2, 55, 537, DateTimeKind.Unspecified).AddTicks(6484), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Preparing",
                            ConstID = "ReportStatus",
                            ConstOrder = 0,
                            ConstValue = "0",
                            Deleted = false
                        },
                        new
                        {
                            Id = new Guid("673e0cd0-d484-411b-802b-eb66d5222fb4"),
                            CDate = new DateTimeOffset(new DateTime(2022, 2, 5, 11, 2, 55, 537, DateTimeKind.Unspecified).AddTicks(6487), new TimeSpan(0, 3, 0, 0, 0)),
                            ConstDesc = "Completed",
                            ConstID = "ReportStatus",
                            ConstOrder = 1,
                            ConstValue = "1",
                            Deleted = false
                        });
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ConstLang", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConstLangDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ConstRID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LangID")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConstRID");

                    b.ToTable("ConstLangs");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportID")
                        .HasColumnType("text");

                    b.Property<string>("ReportName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ReportRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("MDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReportStatusRID")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("RequestedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportStatusRID");

                    b.ToTable("ReportRequests");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ConstLang", b =>
                {
                    b.HasOne("Rise.ReportCore.Models.Const", "Const")
                        .WithMany("ConstLangs")
                        .HasForeignKey("ConstRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Const");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.ReportRequest", b =>
                {
                    b.HasOne("Rise.ReportCore.Models.Const", "ConstReportStatus")
                        .WithMany("ReportRequests")
                        .HasForeignKey("ReportStatusRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstReportStatus");
                });

            modelBuilder.Entity("Rise.ReportCore.Models.Const", b =>
                {
                    b.Navigation("ConstLangs");

                    b.Navigation("ReportRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
